// src/app/(auth)/auth/reset-password/page.tsx
"use client";

import { useEffect, useMemo, useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import Image from "next/image";

export default function ResetPasswordPage() {
  const sp = useSearchParams();
  const router = useRouter();

  const token = sp.get("token") || "";
  const [password, setPassword] = useState("");
  const [password2, setPassword2] = useState("");
  const [showPwd, setShowPwd] = useState(false);
  const [busy, setBusy] = useState(false);
  const [err, setErr] = useState<string>("");
  const [msg, setMsg] = useState<string>("");

  const canSubmit = useMemo(() => {
    return (
      !!token &&
      password.length >= 8 &&
      password2.length >= 8 &&
      password === password2 &&
      !busy
    );
  }, [token, password, password2, busy]);

  useEffect(() => {
    if (!token) setErr("Invalid or missing token.");
  }, [token]);

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    if (!canSubmit) return;
    setErr("");
    setMsg("Updating…");
    setBusy(true);
    try {
      const res = await fetch("/api/auth/reset-password", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ token, password }),
      });
      const j = await res.json().catch(() => ({}));
      if (!res.ok) {
        setMsg("");
        setErr(j?.error || "Invalid or expired token");
        return;
      }
      const email = (j?.email || "").toLowerCase();
      router.replace(`/sign-in?reset=1${email ? `&email=${encodeURIComponent(email)}` : ""}`);
    } catch {
      setMsg("");
      setErr("Network error");
    } finally {
      setBusy(false);
    }
  }

  return (
    <div className="rounded-2xl bg-white/90 p-8 shadow-xl backdrop-blur-sm">
      <div className="flex justify-center mb-4">
        <Image
          src="/images/BMCore-Logo-33.png"
          alt="BioMath Core Logo"
          width={160}
          height={60}
          priority
          className="drop-shadow-lg"
        />
      </div>

      <h1 className="text-center text-2xl font-semibold text-emerald-700 tracking-wide mb-2">
        Reset Password
      </h1>
      <p className="text-center text-sm text-slate-600 mb-6">
        Choose a new password for your account.
      </p>

      {!!err && (
        <div className="mb-4 rounded-md border border-red-200 bg-red-50 px-3 py-2 text-sm text-red-700">
          {err}
        </div>
      )}
      {!!msg && !err && (
        <div className="mb-4 rounded-md border border-slate-200 bg-slate-50 px-3 py-2 text-sm text-slate-700">
          {msg}
        </div>
      )}

      {!token ? (
        <div className="rounded-md border border-red-200 bg-red-50 px-3 py-2 text-sm text-red-700">
          Invalid or missing token. Request a new link on the Forgot Password page.
        </div>
      ) : (
        <form onSubmit={onSubmit} className="space-y-4">
          <label className="block">
            <span className="text-sm font-medium text-gray-700">New password</span>
            <div className="mt-1 relative">
              <input
                type={showPwd ? "text" : "password"}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                placeholder="••••••••"
                className="w-full rounded-md border border-gray-300 px-3 py-2 pr-24 text-black placeholder-gray-400
                           focus:border-emerald-500 focus:ring-2 focus:ring-emerald-400 focus:outline-none"
              />
              <button
                type="button"
                onClick={() => setShowPwd((v) => !v)}
                className="absolute right-2 top-1/2 -translate-y-1/2 rounded-md border border-slate-300 px-2 py-1 text-xs font-semibold text-slate-700 hover:bg-slate-50"
              >
                {showPwd ? "Hide" : "Show"}
              </button>
            </div>
            <p className="mt-1 text-xs text-slate-500">Min 8 characters.</p>
          </label>

          <label className="block">
            <span className="text-sm font-medium text-gray-700">Confirm password</span>
            <input
              type={showPwd ? "text" : "password"}
              value={password2}
              onChange={(e) => setPassword2(e.target.value)}
              required
              placeholder="••••••••"
              className="mt-1 w-full rounded-md border border-gray-300 px-3 py-2 text-black placeholder-gray-400
                         focus:border-emerald-500 focus:ring-2 focus:ring-emerald-400 focus:outline-none"
            />
          </label>

          <button
            type="submit"
            disabled={!canSubmit}
            className="w-full rounded-lg px-4 py-2 font-semibold text-white shadow transition-colors
                       bg-gradient-to-r from-emerald-500 to-cyan-500 hover:from-emerald-600 hover:to-cyan-600
                       focus:outline-none focus:ring-2 focus:ring-emerald-400 disabled:opacity-60"
          >
            {busy ? "Saving…" : "Change password"}
          </button>
        </form>
      )}
    </div>
  );
}