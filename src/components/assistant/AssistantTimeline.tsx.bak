"use client";
import { useEffect, useRef, useState } from "react";

type Item = {
  id: string;
  userId: string;
  model: string | null;
  duration: number | null;
  tokensIn?: number | null;
  tokensOut?: number | null;
  fallback: boolean;
  status: "ok" | "fallback" | "error" | "rate-limit" | string;
  createdAt: string;
};

function Dot({ status }: { status: string }) {
  const color =
    status === "ok" ? "bg-green-500" :
    status === "fallback" ? "bg-yellow-500" :
    status === "rate-limit" ? "bg-orange-500" :
    "bg-red-500";
  return <span className={`inline-block w-2.5 h-2.5 rounded-full ${color}`} />;
}

export default function AssistantTimeline({ userId = "U1001" }: { userId?: string }) {
  const [items, setItems] = useState<Item[] | null>(null);
  const [err, setErr] = useState<string | null>(null);
  const abortRef = useRef<AbortController | null>(null);
  const timerRef = useRef<ReturnType<typeof setInterval> | null>(null);

  async function loadOnce(signal?: AbortSignal) {
    try {
      const res = await fetch(`/api/assistant/activity?userId=${encodeURIComponent(userId)}`, { cache: "no-store", signal });
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const data = await res.json();
      setItems(Array.isArray(data?.items) ? data.items : []);
      setErr(null);
    } catch (e: any) {
      if (e?.name === "AbortError") return;
      setErr(e?.message || "Failed to load");
    }
  }

  useEffect(() => {
    abortRef.current?.abort();
    abortRef.current = new AbortController();
    loadOnce(abortRef.current.signal);

    const start = () => {
      clearInterval(timerRef.current as any);
      timerRef.current = setInterval(() => {
        if (document.visibilityState === "visible") {
          abortRef.current?.abort();
          abortRef.current = new AbortController();
          loadOnce(abortRef.current.signal);
        }
      }, 20000);
    };
    start();

    const onVis = () => {
      if (document.visibilityState === "visible") {
        abortRef.current?.abort();
        abortRef.current = new AbortController();
        loadOnce(abortRef.current.signal);
        start();
      } else {
        clearInterval(timerRef.current as any);
      }
    };
    document.addEventListener("visibilitychange", onVis);

    return () => {
      document.removeEventListener("visibilitychange", onVis);
      clearInterval(timerRef.current as any);
      abortRef.current?.abort();
    };
  }, [userId]);

  return (
    <div className="rounded-2xl shadow bg-white">
      <div className="px-4 py-3 border-b text-sm font-semibold text-gray-700">Assistant Activity</div>
      {err && <div className="px-4 py-3 text-sm text-red-600">{err}</div>}
      {!items && !err && <div className="px-4 py-3 text-sm text-gray-500">Loadingâ€¦</div>}
      {items && items.length === 0 && <div className="px-4 py-3 text-sm text-gray-500">No assistant activity yet.</div>}
      {items && items.length > 0 && (
        <ul className="px-4 py-2">
          {items.map((it) => (
            <li key={it.id} className="relative pl-6 py-3 border-l border-gray-200 last:border-b-0">
              <span className="absolute -left-1 top-4"><Dot status={it.status} /></span>
              <div className="flex items-center justify-between">
                <div className="text-sm">
                  <span className="font-medium">{it.status}</span>
                  
                </div>
                <div className="text-xs text-gray-500">{new Date(it.createdAt).toLocaleString()}</div>
              </div>
              <div className="text-xs text-gray-600 mt-1">{typeof it.duration === "number" ? `duration: ${it.duration} ms` : ""}</div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
