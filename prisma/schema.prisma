generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(cuid())
  email                String        @unique
  name                 String?
  gender               String?
  birthDate            DateTime?
  allowPersonalization Boolean       @default(true)
  conditions           Json?
  allergies            Json?
  medications          Json?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  AIRun                AIRun[]
  chats                ChatMessage[]
  chunks               Chunk[]
  files                File[]
  forms                Form[]
  reports              Report[]
}

model Form {
  id        String   @id @default(cuid())
  userId    String
  title     String
  data      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Report {
  id        String   @id @default(cuid())
  userId    String
  title     String
  kind      String
  summary   String?
  data      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model File {
  id        String   @id @default(cuid())
  userId    String
  name      String
  mime      String?
  size      Int?
  text      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Chunk {
  id         String   @id @default(cuid())
  userId     String
  sourceId   String
  sourceType String
  text       String
  embedding  Json
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, sourceType])
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  role      String
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model AIRun {
  id        String   @id @default(cuid())
  userId    String
  model     String?
  duration  Int
  tokensIn  Int?
  tokensOut Int?
  fallback  Boolean  @default(false)
  status    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}
